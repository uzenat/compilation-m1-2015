waiting...
waiting...
waiting...
waiting...
waiting...
waiting...
automatic:37/186
Trace:
=> J'ai trouvé une archive.
=> Je la décompresse.
flap-uzenat-elouraoui-15.2/
flap-uzenat-elouraoui-15.2/myocamlbuild_config.ml
flap-uzenat-elouraoui-15.2/Makefile.local
flap-uzenat-elouraoui-15.2/src/
flap-uzenat-elouraoui-15.2/src/version.ml
flap-uzenat-elouraoui-15.2/src/common/
flap-uzenat-elouraoui-15.2/src/common/compilers.ml
flap-uzenat-elouraoui-15.2/src/common/languages.ml
flap-uzenat-elouraoui-15.2/src/options.ml
flap-uzenat-elouraoui-15.2/src/hopix/
flap-uzenat-elouraoui-15.2/src/hopix/memory.mli
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypechecker.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixInterpreter.ml
flap-uzenat-elouraoui-15.2/src/hopix/memory.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixLexer.mll
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypeInferenceEngine.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixAST.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixPrettyPrinter.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixParser.mly
flap-uzenat-elouraoui-15.2/src/hopix/hopix.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypes.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixInitialization.ml
flap-uzenat-elouraoui-15.2/src/lib/
flap-uzenat-elouraoui-15.2/src/lib/pprint/
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintEngine.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/LICENSE
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintOCaml.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/CHANGES
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintRenderer.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintEngine.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrint.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/AUTHORS
flap-uzenat-elouraoui-15.2/src/lib/pprint/README
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintCombinators.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintCombinators.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/Makefile
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintOCaml.ml
flap-uzenat-elouraoui-15.2/src/flap.ml
flap-uzenat-elouraoui-15.2/src/utilities/
flap-uzenat-elouraoui-15.2/src/utilities/userInput.ml
flap-uzenat-elouraoui-15.2/src/utilities/position.ml
flap-uzenat-elouraoui-15.2/src/utilities/error.ml
flap-uzenat-elouraoui-15.2/src/utilities/syntacticAnalysis.ml
flap-uzenat-elouraoui-15.2/src/utilities/position.mli
flap-uzenat-elouraoui-15.2/src/utilities/error.mli
flap-uzenat-elouraoui-15.2/src/utilities/extPPrint.ml
flap-uzenat-elouraoui-15.2/src/utilities/syntacticAnalysis.mli
flap-uzenat-elouraoui-15.2/src/utilities/stdUserInput.ml
flap-uzenat-elouraoui-15.2/src/utilities/option.ml
flap-uzenat-elouraoui-15.2/src/utilities/extStd.ml
flap-uzenat-elouraoui-15.2/src/commandLineOptions.ml
flap-uzenat-elouraoui-15.2/_tags
flap-uzenat-elouraoui-15.2/Makefile.generic
flap-uzenat-elouraoui-15.2/Makefile.config
flap-uzenat-elouraoui-15.2/Makefile
=> Je compile.
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
ocamlfind ocamldep -package unix -package str -modules src/flap.ml > src/flap.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/commandLineOptions.ml > src/commandLineOptions.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/options.ml > src/options.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.mli > src/utilities/error.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.mli > src/utilities/position.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/position.cmi src/utilities/position.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/error.cmi src/utilities/error.mli
ocamlfind ocamldep -package unix -package str -modules src/version.ml > src/version.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/options.cmo src/options.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/version.cmo src/version.ml
ocamlfind ocamldep -package unix -package str -modules src/common/compilers.ml > src/common/compilers.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/extStd.ml > src/utilities/extStd.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/common/languages.ml > src/common/languages.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extStd.cmo src/utilities/extStd.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmo src/common/languages.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInitialization.ml > src/hopix/hopixInitialization.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmo src/common/compilers.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopix.ml > src/hopix/hopix.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixAST.ml > src/hopix/hopixAST.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInterpreter.ml > src/hopix/hopixInterpreter.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixAST.cmo src/hopix/hopixAST.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/memory.mli > src/hopix/memory.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/memory.cmi src/hopix/memory.mli
/usr/bin/ocamllex -q src/hopix/hopixLexer.mll
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixLexer.ml > src/hopix/hopixLexer.ml.depends
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/hopix/hopixParser.mly > src/hopix/hopixParser.mly.depends
menhir --ocamlc 'ocamlfind ocamlc -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
File "src/hopix/hopixParser.mly", line 44, characters 0-5:
Warning: the precedence level assigned to SHARP is never useful.
Warning: one state has shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: one shift/reduce conflict was arbitrarily resolved.
Warning: 33 reduce/reduce conflicts were arbitrarily resolved.
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.mli > src/hopix/hopixParser.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixParser.cmi src/hopix/hopixParser.mli
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixPrettyPrinter.ml > src/hopix/hopixPrettyPrinter.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/extPPrint.ml > src/utilities/extPPrint.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrint.ml > src/lib/pprint/PPrint.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.mli > src/lib/pprint/PPrintCombinators.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.mli > src/lib/pprint/PPrintEngine.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintRenderer.ml > src/lib/pprint/PPrintRenderer.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintRenderer.cmo src/lib/pprint/PPrintRenderer.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintEngine.cmi src/lib/pprint/PPrintEngine.mli
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.mli > src/lib/pprint/PPrintOCaml.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintCombinators.cmi src/lib/pprint/PPrintCombinators.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintOCaml.cmi src/lib/pprint/PPrintOCaml.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrint.cmo src/lib/pprint/PPrint.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extPPrint.cmo src/utilities/extPPrint.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypechecker.ml > src/hopix/hopixTypechecker.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypes.ml > src/hopix/hopixTypes.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypes.cmo src/hopix/hopixTypes.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.mli > src/utilities/syntacticAnalysis.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 607, characters 18-264:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Op _|T _|Gener _)
File "src/hopix/hopixInterpreter.ml", line 489, characters 10-21:
Warning 26: unused variable list_to_str.
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixLexer.cmo src/hopix/hopixLexer.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmo src/hopix/hopixPrettyPrinter.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypechecker.cmo src/hopix/hopixTypechecker.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmi src/utilities/syntacticAnalysis.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopix.cmo src/hopix/hopix.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/userInput.ml > src/utilities/userInput.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/stdUserInput.ml > src/utilities/stdUserInput.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/stdUserInput.cmo src/utilities/stdUserInput.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/commandLineOptions.cmo src/commandLineOptions.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInitialization.cmo src/hopix/hopixInitialization.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/userInput.cmo src/utilities/userInput.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/flap.cmo src/flap.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.ml > src/utilities/error.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.ml > src/utilities/position.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/position.cmx src/utilities/position.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/error.cmx src/utilities/error.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/options.cmx src/options.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/version.cmx src/version.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extStd.cmx src/utilities/extStd.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmx src/common/languages.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmx src/common/compilers.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixAST.cmx src/hopix/hopixAST.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/memory.ml > src/hopix/memory.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/memory.cmx src/hopix/memory.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.ml > src/hopix/hopixParser.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixParser.cmx src/hopix/hopixParser.ml
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.ml > src/lib/pprint/PPrintCombinators.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.ml > src/lib/pprint/PPrintEngine.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintRenderer.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintEngine.ml
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.ml > src/lib/pprint/PPrintOCaml.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintCombinators.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrintOCaml.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrint.cmx src/lib/pprint/PPrint.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extPPrint.cmx src/utilities/extPPrint.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypes.cmx src/hopix/hopixTypes.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.ml > src/utilities/syntacticAnalysis.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 607, characters 18-264:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Op _|T _|Gener _)
File "src/hopix/hopixInterpreter.ml", line 489, characters 10-21:
Warning 26: unused variable list_to_str.
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixLexer.cmx src/hopix/hopixLexer.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixPrettyPrinter.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypechecker.cmx src/hopix/hopixTypechecker.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmx src/utilities/syntacticAnalysis.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopix.cmx src/hopix/hopix.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/stdUserInput.cmx src/utilities/stdUserInput.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/commandLineOptions.cmx src/commandLineOptions.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInitialization.cmx src/hopix/hopixInitialization.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/userInput.cmx src/utilities/userInput.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/flap.cmx src/flap.ml
ocamlfind ocamlopt -linkpkg -package unix -package str src/utilities/position.cmx src/utilities/error.cmx src/options.cmx src/version.cmx src/commandLineOptions.cmx src/common/languages.cmx src/utilities/extStd.cmx src/common/compilers.cmx src/hopix/hopixAST.cmx src/hopix/memory.cmx src/hopix/hopixInterpreter.cmx src/hopix/hopixParser.cmx src/hopix/hopixLexer.cmx src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrint.cmx src/utilities/extPPrint.cmx src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixTypes.cmx src/hopix/hopixTypechecker.cmx src/utilities/syntacticAnalysis.cmx src/hopix/hopix.cmx src/hopix/hopixInitialization.cmx src/utilities/stdUserInput.cmx src/utilities/userInput.cmx src/flap.cmx -o src/flap.native
ln -s flap.native flap
=> Je lance les tests.
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make -C tests check
make[1]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests'
make -C ..
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2'
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2'
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/bad'
========================================================
In parser/bad
GOOD: 0 / 0
[XFAIL]  casematters.hopix

INPUT: 
VAL x := 1.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char10.hopix

INPUT: 
val x := '\0b'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char1.hopix

INPUT: 
val x := ' a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char2.hopix

INPUT: 
val x := '\a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char3.hopix

INPUT: 
val x := '\256'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char4.hopix

INPUT: 
val x := '\666'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char5.hopix

INPUT: 
val x := '\0000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char6.hopix

INPUT: 
val x := '\0x0G'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char7.hopix

INPUT: 
val x := '\0x000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char8.hopix

INPUT: 
val x := '\0x1'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char9.hopix

INPUT: 
val x := '\0b110011001'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  comment1.hopix

INPUT: 
{* This is an non-terminated comment ...

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  comment2.hopix

INPUT: 
{* This {* is {* a *} badly {* nested *} comment *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptydo.hopix

INPUT: 
val x := do done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptymatch.hopix

INPUT: 
val x := 1 ? { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptyrec.hopix

INPUT: 
val x := { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptytypes.hopix

INPUT: 
type empty := { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  eq_nonassoc.hopix

INPUT: 
val x := (1 = 2 = true).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  extern.hopix

INPUT: 
val x :=
  extern foo : int;
  1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  labinfix.hopix

INPUT: 
val x := { `aa := 1 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  lt_nonassoc.hopix

INPUT: 
val x := (1 < x < 2).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  missingty.hopix

INPUT: 
val x := (1 : ).
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  neg.hopix

INPUT: 
val x := -1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  num1.hopix

INPUT: 
val x := 2147483648. {* 2^31 *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  num2.hopix

INPUT: 
val x := 0xdeadbeef0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  pairs.hopix

INPUT: 
val x := (1,2).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  patt1.hopix

INPUT: 
val f A (x,y) := x + y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  patt2.hopix

INPUT: 
val f A|B := 1.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  seq.hopix

INPUT: 
val x := 1 ; 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  string1.hopix

INPUT: 
val x := "abc\".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  string2.hopix

INPUT: 
val x := "abc"de".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr1.hopix

INPUT: 
type t := { a | b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr2.hopix

INPUT: 
type t := { `aa | `bb }

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr3.hopix

INPUT: 
val x := aa (1,2,3).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unbalanced.hopix

INPUT: 
val x := ((1).
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unclosedtoplevel.hopix

INPUT: 
val x := 1
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unfinishedlocaldef.hopix

INPUT: 
val x :=
  val x := 2;
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
BAD:  37 / 37
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/bad'
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/good'
========================================================
In parser/good
[ KO ]   -->  comment1.hopix

INPUT:
{* This is a comment *}

val a :=
{*
   Another one.
*}
1.

val b := 1 {* Still a comment *} + 1.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val a := 1.
val b := `+ 1 1.
--------------------------------------------------------
[ KO ]   -->  comment2.hopix

INPUT:

** This is also a comment.

val x := 1 + ** Another comment
1.

val x := 1 +** Still a comment
2.

val x := 3.** Again...

** A final comment **

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ 1 1.
val x := `+ 1 2.
val x := 3.
--------------------------------------------------------
[ KO ]   -->  comment4.hopix

INPUT:
{* This {* is {* a *} {* correctly *} nested *} comment *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 

--------------------------------------------------------
[ KO ]   -->  do1.hopix

INPUT:

{*
  NOTA: the generated names for the local abbreviations will probably
  not match :-(
*}

val seq3 i1 i2 i3 := do i1; i2; i3 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
--------------------------------------------------------
[ KO ]   -->  do2.hopix

INPUT:

val seq3 i1 i2 i3 := do i1; i2; i3; done.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
--------------------------------------------------------
[ KO ]   -->  do3.hopix

INPUT:
{* test of => followed by ; *}

val f y :=
 do y ? _ => 1;
    2
 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \y => val nothing := y ? { | _ => 1 }; 2.
--------------------------------------------------------
[ KO ]   -->  do4.hopix

INPUT:
val f y :=
 do 1; y ? _ => 2 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \y => val nothing := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  do.hopix

INPUT:

{*
  NOTA: the generated names for the local abbreviations will probably
  not match :-(
*}

val seq3 i1 i2 i3 := do i1; i2; i3 done.

val seq3 i1 i2 i3 := do i1; i2; i3; done.

{* test of => followed by ; *}

val f y :=
 do y ? _ => 1;
    2
 done.

val f y :=
 do 1; y ? _ => 2 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
val f := \y => val nothing := y ? { | _ => 1 }; 2.
val f := \y => val nothing := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  extern1.hopix

INPUT:

extern something : int.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern something : int.
--------------------------------------------------------
[ KO ]   -->  extern2.hopix

INPUT:
extern some_function : int -> (int -> int) -> int.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern some_function : int -> (int -> int) -> int.
--------------------------------------------------------
[ KO ]   -->  extern.hopix

INPUT:

extern something : int.
extern some_function : int -> (int -> int) -> int.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern something : int.
extern some_function : int -> (int -> int) -> int.
--------------------------------------------------------
[ KO ]   -->  functions2.hopix

INPUT:
val f (x : int) (y : int) : int := x + y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \(x : int) => \(y : int) => (`+ x y : int).
--------------------------------------------------------
[ KO ]   -->  functions3.hopix

INPUT:
val f : int -> int := \x => x + 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := (\x => `+ x 1 : int -> int).
--------------------------------------------------------
[ KO ]   -->  functions4.hopix

INPUT:
val g := \x y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  functions5.hopix

INPUT:
val g := \x => \y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  functions.hopix

INPUT:
val f x y := x + y.
val f (x : int) (y : int) : int := x + y.
val f : int -> int := \x => x + 1.

val g := \x y => x+y.
val g := \x => \y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => `+ x y.
val f := \(x : int) => \(y : int) => (`+ x y : int).
val f := (\x => `+ x 1 : int -> int).
val g := \x => \y => `+ x y.
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  infix1.hopix

INPUT:

val `++ x y := x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `++ := \x => \y => x.
--------------------------------------------------------
[ KO ]   -->  infix2.hopix

INPUT:
val z := 0 `++` 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val z := `++ 0 0.
--------------------------------------------------------
[ KO ]   -->  infix3.hopix

INPUT:
val k := `++ 0 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val k := `++ 0 0.
--------------------------------------------------------
[ KO ]   -->  infix4.hopix

INPUT:
val `eats := \x y => x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `eats := \x => \y => x.
--------------------------------------------------------
[ KO ]   -->  infix5.hopix

INPUT:
val wow cat mouse := cat `eats` mouse.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val wow := \cat => \mouse => `eats cat mouse.
--------------------------------------------------------
[ KO ]   -->  infix6.hopix

INPUT:

val apply := \ `op x y => x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  infix7.hopix

INPUT:
val apply `op x y := x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  infix.hopix

INPUT:

val `++ x y := x.
val z := 0 `++` 0.
val k := `++ 0 0.
val `eats := \x y => x.
val wow cat mouse := cat `eats` mouse.

val apply := \ `op x y => x `op` y.
val apply `op x y := x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `++ := \x => \y => x.
val z := `++ 0 0.
val k := `++ 0 0.
val `eats := \x => \y => x.
val wow := \cat => \mouse => `eats cat mouse.
val apply := \`op => \x => \y => `op x y.
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  lexchar10.hopix

INPUT:
val x := '\r'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\r'.
--------------------------------------------------------
[ KO ]   -->  lexchar11.hopix

INPUT:
val x := '\000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\000'.
--------------------------------------------------------
[ KO ]   -->  lexchar12.hopix

INPUT:
val x := '\001'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\001'.
--------------------------------------------------------
[ KO ]   -->  lexchar13.hopix

INPUT:
val x := '\255'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\255'.
--------------------------------------------------------
[ KO ]   -->  lexchar14.hopix

INPUT:
val x := '\0xFF'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\255'.
--------------------------------------------------------
[ KO ]   -->  lexchar15.hopix

INPUT:
val x := '\0XaB'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\171'.
--------------------------------------------------------
[ KO ]   -->  lexchar16.hopix

INPUT:
val x := '\0x12'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\018'.
--------------------------------------------------------
[ KO ]   -->  lexchar17.hopix

INPUT:
val x := '\0b11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexchar18.hopix

INPUT:
val x := '\0B11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexchar1.hopix

INPUT:
val x := 'a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'a'.
--------------------------------------------------------
[ KO ]   -->  lexchar2.hopix

INPUT:
val x := 'A'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'A'.
--------------------------------------------------------
[ KO ]   -->  lexchar3.hopix

INPUT:
val x := '*'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '*'.
--------------------------------------------------------
[ KO ]   -->  lexchar4.hopix

INPUT:
val x := '@'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '@'.
--------------------------------------------------------
[ KO ]   -->  lexchar5.hopix

INPUT:
val x := '\\'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\\'.
--------------------------------------------------------
[ KO ]   -->  lexchar6.hopix

INPUT:
val x := '\''.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\''.
--------------------------------------------------------
[ KO ]   -->  lexchar7.hopix

INPUT:
val x := '\n'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\n'.
--------------------------------------------------------
[ KO ]   -->  lexchar8.hopix

INPUT:
val x := '\t'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\t'.
--------------------------------------------------------
[ KO ]   -->  lexchar9.hopix

INPUT:
val x := '\b'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\b'.
--------------------------------------------------------
[ KO ]   -->  lexchar.hopix

INPUT:
val x := 'a'.
val x := 'A'.
val x := '*'.
val x := '@'.
val x := '\\'.
val x := '\''.
val x := '\n'.
val x := '\t'.
val x := '\b'.
val x := '\r'.
val x := '\000'.
val x := '\001'.
val x := '\255'.
val x := '\0xFF'.
val x := '\0XaB'.
val x := '\0x12'.
val x := '\0b11001100'.
val x := '\0B11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'a'.
val x := 'A'.
val x := '*'.
val x := '@'.
val x := '\\'.
val x := '\''.
val x := '\n'.
val x := '\t'.
val x := '\b'.
val x := '\r'.
val x := '\000'.
val x := '\001'.
val x := '\255'.
val x := '\255'.
val x := '\171'.
val x := '\018'.
val x := '\204'.
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexnum1.hopix

INPUT:
val x := 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0.
--------------------------------------------------------
[ KO ]   -->  lexnum2.hopix

INPUT:
val x := 1234567890.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 1234567890.
--------------------------------------------------------
[ KO ]   -->  lexnum3.hopix

INPUT:
val x := 0xdeadbee.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 233495534.
--------------------------------------------------------
[ KO ]   -->  lexnum4.hopix

INPUT:
val x := 0XdeadBEE.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 233495534.
--------------------------------------------------------
[ KO ]   -->  lexnum5.hopix

INPUT:
val x := 0x12345678.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 305419896.
--------------------------------------------------------
[ KO ]   -->  lexnum6.hopix

INPUT:
val x := 0xdeadbeef.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := -559038737.
--------------------------------------------------------
[ KO ]   -->  lexnum7.hopix

INPUT:
val x := 0b101010.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 42.
--------------------------------------------------------
[ KO ]   -->  lexnum.hopix

INPUT:
val x := 0.
val x := 1234567890.
val x := 0xdeadbee.
val x := 0XdeadBEE.
val x := 0x12345678.
val x := 0xdeadbeef.
val x := 0b101010.
val x := 0B101010.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0.
val x := 1234567890.
val x := 233495534.
val x := 233495534.
val x := 305419896.
val x := -559038737.
val x := 42.
val x := 42.
--------------------------------------------------------
[ KO ]   -->  lexstring1.hopix

INPUT:
val x := "".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "".
--------------------------------------------------------
[ KO ]   -->  lexstring2.hopix

INPUT:
val x := "abc".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "abc".
--------------------------------------------------------
[ KO ]   -->  lexstring3.hopix

INPUT:
val x := "**".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "**".
--------------------------------------------------------
[ KO ]   -->  lexstring4.hopix

INPUT:
val x := "{*".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "{*".
--------------------------------------------------------
[ KO ]   -->  lexstring5.hopix

INPUT:
val x := "*}".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "*}".
--------------------------------------------------------
[ KO ]   -->  lexstring6.hopix

INPUT:
val x := "a\'a".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "a'a".
--------------------------------------------------------
[ KO ]   -->  lexstring.hopix

INPUT:
val x := "".
val x := "abc".
val x := "**".
val x := "{*".
val x := "*}".
val x := "a\'a".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "".
val x := "abc".
val x := "**".
val x := "{*".
val x := "*}".
val x := "a'a".
--------------------------------------------------------
[ KO ]   -->  lexweird1.hopix

INPUT:
{* These are actually recognized as 0 applied to a variable.
   This is badly typed, but that's another story... *}

val x := 0x.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0 x.
--------------------------------------------------------
[ KO ]   -->  lexweird2.hopix

INPUT:
val b := 0b.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val b := 0 b.
--------------------------------------------------------
[ KO ]   -->  lexweird.hopix

INPUT:
{* These are actually recognized as 0 applied to a variable.
   This is badly typed, but that's another story... *}

val x := 0x.
val b := 0b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0 x.
val b := 0 b.
--------------------------------------------------------
[ KO ]   -->  list.hopix

INPUT:

type list := { Cons : int * list | Nil }.

rec map f l : list :=
  l ?
  | Nil => Nil
  | Cons (x, xs) => Cons (f x, map f xs)
.

rec append l1 l2 : list :=
  l1 ? Nil => l2 | Cons (x, xs) => Cons (x, append xs l2)
.

rec sum l1 l2 : list :=
  l1 ?
  | Nil => l2 ? { _ => l2 }
  | Cons (x, xs) => l2 ? Cons (y, ys) => Cons (x + y, sum xs ys) | _ => l1
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type list := { Cons : int * list | Nil }.
rec
 map :=
  \f =>
    \l =>
      (l ? { | Nil => Nil | Cons (x, xs) => Cons (f x, map f xs) }
      : list).
rec
 append :=
  \l1 =>
    \l2 =>
      (l1 ? { | Nil => l2 | Cons (x, xs) => Cons (x, append xs l2) }
      : list).
rec
 sum :=
  \l1 =>
    \l2 =>
      (l1 ?
      {
      | Nil => l2 ? { | _ => l2 }
      | Cons (x, xs) =>
        l2 ? { | Cons (y, ys) => Cons (`+ x y, sum xs ys) | _ => l1 }
      }
      : list).
--------------------------------------------------------
[ KO ]   -->  localdef1.hopix

INPUT:

val x :=
  val y := 1;
  val z := 2;
  y+z.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; val z := 2; `+ y z.
--------------------------------------------------------
[ KO ]   -->  localdef2.hopix

INPUT:
val x := 1 +
  val y := 1;
  val z := 2;
  y + z.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ 1 (val y := 1; val z := 2; `+ y z).
--------------------------------------------------------
[ KO ]   -->  localdef3.hopix

INPUT:

val x :=
  val y :=
    val z := 1;
    2*z;
  val t :=
    val u := 2;
    2*u;
  y*t.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x :=
  val y := val z := 1; `* 2 z; val t := val u := 2; `* 2 u; `* y t.
--------------------------------------------------------
[ KO ]   -->  localdef4.hopix

INPUT:

val even :=
  rec even x := if x = 0 then true else odd (x-1) fi
  and odd x := if x = 0 then false else even (x-1) fi;
  even.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val even :=
  rec
     even := \x => if `= x 0 then true else odd (`- x 1) fi
    and
     odd := \x => if `= x 0 then false else even (`- x 1) fi;
  even.
--------------------------------------------------------
[ KO ]   -->  localdef.hopix

INPUT:

val x :=
  val y := 1;
  val z := 2;
  y+z.

val x := 1 +
  val y := 1;
  val z := 2;
  y + z.

val x :=
  val y :=
    val z := 1;
    2*z;
  val t :=
    val u := 2;
    2*u;
  y*t.

val even :=
  rec even x := if x = 0 then true else odd (x-1) fi
  and odd x := if x = 0 then false else even (x-1) fi;
  even.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; val z := 2; `+ y z.
val x := `+ 1 (val y := 1; val z := 2; `+ y z).
val x :=
  val y := val z := 1; `* 2 z; val t := val u := 2; `* 2 u; `* y t.
val even :=
  rec
     even := \x => if `= x 0 then true else odd (`- x 1) fi
    and
     odd := \x => if `= x 0 then false else even (`- x 1) fi;
  even.
--------------------------------------------------------
[ KO ]   -->  match11.hopix

INPUT:

type enum := { | A | B | C | D }.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
--------------------------------------------------------
[ KO ]   -->  match12.hopix

INPUT:
val f x := x ? A => 1 | B => 2 | C => 3 | D => 4.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
--------------------------------------------------------
[ KO ]   -->  match13.hopix

INPUT:
val f x := x ? A => 1 | B | C | D => 3.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match14.hopix

INPUT:
val f x := x ? | A => 1 | B | C | D => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match15.hopix

INPUT:
val f x y := x ? A => y ? B => C.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match1.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? A => 1 | B => 2 | C => 3 | D => 4.
val f x := x ? A => 1 | B | C | D => 3.
val f x := x ? | A => 1 | B | C | D => 3.
val f x y := x ? A => y ? B => C.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match21.hopix

INPUT:

type enum := { | A | B | C | D }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
--------------------------------------------------------
[ KO ]   -->  match22.hopix

INPUT:

val f x := x ? { A => 1 | B => 2 | C => 3 | D => 4 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
--------------------------------------------------------
[ KO ]   -->  match23.hopix

INPUT:
val f x := x ? { A => 1 | B | C | D => 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match24.hopix

INPUT:
val f x := x ? { | A => 1 | B | C | D => 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match25.hopix

INPUT:
val f x y := x ? { A => y ? { B => C } }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match2.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? { A => 1 | B => 2 | C => 3 | D => 4 }.
val f x := x ? { A => 1 | B | C | D => 3 }.
val f x := x ? { | A => 1 | B | C | D => 3 }.
val f x y := x ? { A => y ? { B => C } }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match31.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? ((A|B)|(C|D)) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match32.hopix

INPUT:
val f x := x ? (((A|B)|C)|D) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match33.hopix

INPUT:
val f x := x ? (A|(B|(C|D))) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match34.hopix

INPUT:
val f x := x ? ((A&B)&(C&D)) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match35.hopix

INPUT:
val f x := x ? (((A&B)&C)&D) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match36.hopix

INPUT:
val f x := x ? (A&(B&(C&D))) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match37.hopix

INPUT:
val f x := x ? (A|B) & y & (B|C) & _ => y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | ((A | B) & y & (B | C) & _) => y }.
--------------------------------------------------------
[ KO ]   -->  match38.hopix

INPUT:
val f x := x ? A | B & y | _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | (B & y) | _) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match3.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? ((A|B)|(C|D)) => 1.
val f x := x ? (((A|B)|C)|D) => 1.
val f x := x ? (A|(B|(C|D))) => 1.

val f x := x ? ((A&B)&(C&D)) => 1.
val f x := x ? (((A&B)&C)&D) => 1.
val f x := x ? (A&(B&(C&D))) => 1.

val f x := x ? (A|B) & y & (B|C) & _ => y.
val f x := x ? A | B & y | _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | ((A | B) & y & (B | C) & _) => y }.
val f := \x => x ? { | (A | (B & y) | _) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match41.hopix

INPUT:
type record := { aaa : int; bbb : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type record := { aaa : int ; bbb : int }.
--------------------------------------------------------
[ KO ]   -->  match42.hopix

INPUT:
val f x := x ? { aaa = a; bbb = b } => a+b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match43.hopix

INPUT:
val f x := x ? { { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match44.hopix

INPUT:
val f x := x ? | { aaa = a; bbb = b } => a+b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match45.hopix

INPUT:
val f x := x ? { | { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match4.hopix

INPUT:

type record := { aaa : int; bbb : int }.

val f x := x ? { aaa = a; bbb = b } => a+b.
val f x := x ? { { aaa = a; bbb = b } => a+b }.
val f x := x ? | { aaa = a; bbb = b } => a+b.
val f x := x ? { | { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type record := { aaa : int ; bbb : int }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  mutrecfun.hopix

INPUT:

rec odd (n : int) : int :=
  if n = 0 then false else
  if n = 1 then true else
    even (n - 1)
  fi fi
and even (n : int) : int :=
  if n = 0 then true else
  if n = 1 then false else
    odd (n - 1)
  fi fi
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
rec
 odd :=
  \(n : int) =>
    (if `= n 0 then false
    else if `= n 1 then true else even (`- n 1) fi fi
    : int)
and even :=
  \(n : int) =>
    (if `= n 0 then true
    else if `= n 1 then false else odd (`- n 1) fi fi
    : int).
--------------------------------------------------------
[ KO ]   -->  pri_app1.hopix

INPUT:

{* priority of application *}

val x := f a + b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (f a) b.
--------------------------------------------------------
[ KO ]   -->  pri_app2.hopix

INPUT:
val x := f a # b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := f (a#b).
--------------------------------------------------------
[ KO ]   -->  pri_app3.hopix

INPUT:
val x := f g a.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := f g a.
--------------------------------------------------------
[ KO ]   -->  pri_app.hopix

INPUT:

{* priority of application *}

val x := f a + b.
val x := f a # b.
val x := f g a.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (f a) b.
val x := f (a#b).
val x := f g a.
--------------------------------------------------------
[ KO ]   -->  pri_arith1.hopix

INPUT:
val x := 1+2+3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith2.hopix

INPUT:
val x := 1+2-3-4+5.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`- (`- (`+ 1 2) 3) 4) 5.
--------------------------------------------------------
[ KO ]   -->  pri_arith3.hopix

INPUT:
val x := 1*2*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`* 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith4.hopix

INPUT:
val x := 1/2/3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `/ (`/ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith5.hopix

INPUT:
val x := 1*2/3/4*5.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`/ (`/ (`* 1 2) 3) 4) 5.
--------------------------------------------------------
[ KO ]   -->  pri_arith6.hopix

INPUT:
val x := 1+2*3-4.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `- (`+ 1 (`* 2 3)) 4.
--------------------------------------------------------
[ KO ]   -->  pri_arith7.hopix

INPUT:
val x := 1+2*3-4/5+6.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`- (`+ 1 (`* 2 3)) (`/ 4 5)) 6.
--------------------------------------------------------
[ KO ]   -->  pri_arith8.hopix

INPUT:
val x := (1+2)*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith.hopix

INPUT:

{* Arithmetical priorities *}

val x := 1+2+3.
val x := 1+2-3-4+5.
val x := 1*2*3.
val x := 1/2/3.
val x := 1*2/3/4*5.
val x := 1+2*3-4.
val x := 1+2*3-4/5+6.
val x := (1+2)*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`+ 1 2) 3.
val x := `+ (`- (`- (`+ 1 2) 3) 4) 5.
val x := `* (`* 1 2) 3.
val x := `/ (`/ 1 2) 3.
val x := `* (`/ (`/ (`* 1 2) 3) 4) 5.
val x := `- (`+ 1 (`* 2 3)) 4.
val x := `+ (`- (`+ 1 (`* 2 3)) (`/ 4 5)) 6.
val x := `* (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_comp1.hopix

INPUT:

{* Priorities of comparisons and boolean operators *}

val x := 2 = 1 + 1.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 2 (`+ 1 1).
--------------------------------------------------------
[ KO ]   -->  pri_comp2.hopix

INPUT:
val x := true || true || true && true && true.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `|| (`|| true true) (`&& (`&& true true) true).
--------------------------------------------------------
[ KO ]   -->  pri_comp3.hopix

INPUT:
val x := 1 + 1 < 2 + 2 && 4 = 7.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `&& (`< (`+ 1 1) (`+ 2 2)) (`= 4 7).
--------------------------------------------------------
[ KO ]   -->  pri_comp.hopix

INPUT:

{* Priorities of comparisons and boolean operators *}

val x := 2 = 1 + 1.

val x := true || true || true && true && true.

val x := 1 + 1 < 2 + 2 && 4 = 7.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 2 (`+ 1 1).
val x := `|| (`|| true true) (`&& (`&& true true) true).
val x := `&& (`< (`+ 1 1) (`+ 2 2)) (`= 4 7).
--------------------------------------------------------
[ KO ]   -->  pri_infix.hopix

INPUT:

{* priority of infix operators *}

val x := 1 = 1 `op` 2 `op` 3 + 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 1 (`op (`op 1 2) (`+ 3 3)).
--------------------------------------------------------
[ KO ]   -->  pri_larrow1.hopix

INPUT:
{* priority of <- *}

val x := t#a <- 1 + 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `+ 1 2.
--------------------------------------------------------
[ KO ]   -->  pri_larrow2.hopix

INPUT:
val x := t#a <- true || false.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `|| true false.
--------------------------------------------------------
[ KO ]   -->  pri_larrow3.hopix

INPUT:
val x := t#a <- t ? _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- (t ? { | _ => 1 }).
--------------------------------------------------------
[ KO ]   -->  pri_larrow.hopix

INPUT:
{* priority of <- *}

val x := t#a <- 1 + 2.
val x := t#a <- true || false.
val x := t#a <- t ? _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `+ 1 2.
val x := t#a <- `|| true false.
val x := t#a <- (t ? { | _ => 1 }).
--------------------------------------------------------
[ KO ]   -->  pri_qmark1.hopix

INPUT:
{* priority of ? *}
val x := x * x ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* x (x ? { | _ => 3 }).
--------------------------------------------------------
[ KO ]   -->  pri_qmark2.hopix

INPUT:
val x := x # a ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := x#a ? { | _ => 3 }.
--------------------------------------------------------
[ KO ]   -->  pri_qmark.hopix

INPUT:
{* priority of ? *}

val x := x * x ? _ => 3.
val x := x # a ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* x (x ? { | _ => 3 }).
val x := x#a ? { | _ => 3 }.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow1.hopix

INPUT:

{* priority of => *}

val x := \x => x + x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `+ x x.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow2.hopix

INPUT:
val x := \x => x && x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `&& x x.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow3.hopix

INPUT:

val x := \x => x#a <- 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => x#a <- 1.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow4.hopix

INPUT:

val x :=
 val f := \x => x;
 f.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val f := \x => x; f.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow5.hopix

INPUT:

val x :=
  val f y := y ? _ => 1;
  f 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val f := \y => y ? { | _ => 1 }; f 1.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow.hopix

INPUT:

{* priority of => *}

val x := \x => x + x.
val x := \x => x && x.

val x := \x => x#a <- 1.

val x :=
 val f := \x => x;
 f.

val x :=
  val f y := y ? _ => 1;
  f 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `+ x x.
val x := \x => `&& x x.
val x := \x => x#a <- 1.
val x := val f := \x => x; f.
val x := val f := \y => y ? { | _ => 1 }; f 1.
--------------------------------------------------------
[ KO ]   -->  pri_scolon1.hopix

INPUT:
{* priority of ; *}

val x :=
  val y := 1 + 1 ;
  y + y.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := `+ 1 1; `+ y y.
--------------------------------------------------------
[ KO ]   -->  pri_scolon2.hopix

INPUT:
val x :=
  val y := true ;
  y || y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := true; `|| y y.
--------------------------------------------------------
[ KO ]   -->  pri_scolon3.hopix

INPUT:
val x :=
  val y := 1 ; y ? _ => 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  pri_scolon.hopix

INPUT:
{* priority of ; *}

val x :=
  val y := 1 + 1 ;
  y + y.

val x :=
  val y := true ;
  y || y.

val x :=
  val y := 1 ; y ? _ => 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := `+ 1 1; `+ y y.
val x := val y := true; `|| y y.
val x := val y := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  pri_sharp1.hopix

INPUT:

{* priority of # *}

val x := t#a#b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a#b.
--------------------------------------------------------
[ KO ]   -->  pri_sharp2.hopix

INPUT:
val x := t#a*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (t#a) 3.
--------------------------------------------------------
[ KO ]   -->  pri_sharp.hopix

INPUT:

{* priority of # *}

val x := t#a#b.
val x := t#a*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a#b.
val x := `* (t#a) 3.
--------------------------------------------------------
[ KO ]   -->  recfun.hopix

INPUT:
rec fact (n : int) : int :=
  if n = 0 then 1 else n * fact (n - 1) fi
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
rec
 fact :=
  \(n : int) =>
    (if `= n 0 then 1 else `* n (fact (`- n 1)) fi : int).
--------------------------------------------------------
[ KO ]   -->  record1.hopix

INPUT:
type point := { x : int; y : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
--------------------------------------------------------
[ KO ]   -->  record2.hopix

INPUT:

val p := { x := 2; y := 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val p := { x := 2; y := 3 }.
--------------------------------------------------------
[ KO ]   -->  record3.hopix

INPUT:
val y := p#x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val y := p#x.
--------------------------------------------------------
[ KO ]   -->  record4.hopix

INPUT:
val u := p#x <- 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val u := p#x <- 3.
--------------------------------------------------------
[ KO ]   -->  record.hopix

INPUT:

type point := { x : int; y : int }.

val p := { x := 2; y := 3 }.
val y := p#x.
val u := p#x <- 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
val p := { x := 2; y := 3 }.
val y := p#x.
val u := p#x <- 3.
--------------------------------------------------------
[ KO ]   -->  types1.hopix

INPUT:
type some_abstract_type.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type some_abstract_type .
--------------------------------------------------------
[ KO ]   -->  types2.hopix

INPUT:
type point := { x : int; y : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
--------------------------------------------------------
[ KO ]   -->  types3.hopix

INPUT:
type unit := { Unit }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type unit := { Unit }.
--------------------------------------------------------
[ KO ]   -->  types4.hopix

INPUT:
type list := { Cons : int * list | Nil }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type list := { Cons : int * list | Nil }.
--------------------------------------------------------
[ KO ]   -->  types5.hopix

INPUT:
type option ['a] := { None | Some : 'a }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type option[ 'a ] := { None | Some : 'a }.
--------------------------------------------------------
[ KO ]   -->  types6.hopix

INPUT:
type either ['a, 'b] := { Left : 'a | Right : 'b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type either[ 'a, 'b ] := { Left : 'a | Right : 'b }.
--------------------------------------------------------
[ KO ]   -->  types7.hopix

INPUT:
type stream ['a] := { Next : unit -> 'a * stream['a] }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type stream[ 'a ] := { Next : unit -> 'a * stream [ 'a ] }.
--------------------------------------------------------
[ KO ]   -->  types8.hopix

INPUT:
type t1 := { T1 : (option [point] -> int) -> int -> int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type t1 := { T1 : (option [ point ] -> int) -> int -> int }.
--------------------------------------------------------
[ KO ]   -->  types9.hopix

INPUT:
type t2 := { T2 : either [int, option [int]] }.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type t2 := { T2 : either [ int, option [ int ] ] }.
--------------------------------------------------------
[ KO ]   -->  types.hopix

INPUT:
type some_abstract_type.
type point := { x : int; y : int }.
type unit := { Unit }.
type list := { Cons : int * list | Nil }.
type option ['a] := { None | Some : 'a }.
type either ['a, 'b] := { Left : 'a | Right : 'b }.
type stream ['a] := { Next : unit -> 'a * stream['a] }.
type t1 := { T1 : (option [point] -> int) -> int -> int }.
type t2 := { T2 : either [int, option [int]] }.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type some_abstract_type .
type point := { x : int ; y : int }.
type unit := { Unit }.
type list := { Cons : int * list | Nil }.
type option[ 'a ] := { None | Some : 'a }.
type either[ 'a, 'b ] := { Left : 'a | Right : 'b }.
type stream[ 'a ] := { Next : unit -> 'a * stream [ 'a ] }.
type t1 := { T1 : (option [ point ] -> int) -> int -> int }.
type t2 := { T2 : either [ int, option [ int ] ] }.
--------------------------------------------------------
GOOD: 0 / 149
BAD:  0 / 0
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/good'
--------------------------------------------------------
Global results:
BAD:   37 / 37
GOOD:  0 / 149
--------------------------------------------------------
make[1]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests'=> J'ai trouvé une archive.
=> Je la décompresse.
flap-uzenat-elouraoui-15.2/
flap-uzenat-elouraoui-15.2/myocamlbuild_config.ml
flap-uzenat-elouraoui-15.2/Makefile.local
flap-uzenat-elouraoui-15.2/src/
flap-uzenat-elouraoui-15.2/src/version.ml
flap-uzenat-elouraoui-15.2/src/common/
flap-uzenat-elouraoui-15.2/src/common/compilers.ml
flap-uzenat-elouraoui-15.2/src/common/languages.ml
flap-uzenat-elouraoui-15.2/src/options.ml
flap-uzenat-elouraoui-15.2/src/hopix/
flap-uzenat-elouraoui-15.2/src/hopix/memory.mli
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypechecker.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixInterpreter.ml
flap-uzenat-elouraoui-15.2/src/hopix/memory.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixLexer.mll
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypeInferenceEngine.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixAST.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixPrettyPrinter.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixParser.mly
flap-uzenat-elouraoui-15.2/src/hopix/hopix.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixTypes.ml
flap-uzenat-elouraoui-15.2/src/hopix/hopixInitialization.ml
flap-uzenat-elouraoui-15.2/src/lib/
flap-uzenat-elouraoui-15.2/src/lib/pprint/
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintEngine.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/LICENSE
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintOCaml.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/CHANGES
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintRenderer.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintEngine.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrint.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/AUTHORS
flap-uzenat-elouraoui-15.2/src/lib/pprint/README
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintCombinators.ml
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintCombinators.mli
flap-uzenat-elouraoui-15.2/src/lib/pprint/Makefile
flap-uzenat-elouraoui-15.2/src/lib/pprint/PPrintOCaml.ml
flap-uzenat-elouraoui-15.2/src/flap.ml
flap-uzenat-elouraoui-15.2/src/utilities/
flap-uzenat-elouraoui-15.2/src/utilities/userInput.ml
flap-uzenat-elouraoui-15.2/src/utilities/position.ml
flap-uzenat-elouraoui-15.2/src/utilities/error.ml
flap-uzenat-elouraoui-15.2/src/utilities/syntacticAnalysis.ml
flap-uzenat-elouraoui-15.2/src/utilities/position.mli
flap-uzenat-elouraoui-15.2/src/utilities/error.mli
flap-uzenat-elouraoui-15.2/src/utilities/extPPrint.ml
flap-uzenat-elouraoui-15.2/src/utilities/syntacticAnalysis.mli
flap-uzenat-elouraoui-15.2/src/utilities/stdUserInput.ml
flap-uzenat-elouraoui-15.2/src/utilities/option.ml
flap-uzenat-elouraoui-15.2/src/utilities/extStd.ml
flap-uzenat-elouraoui-15.2/src/commandLineOptions.ml
flap-uzenat-elouraoui-15.2/_tags
flap-uzenat-elouraoui-15.2/Makefile.generic
flap-uzenat-elouraoui-15.2/Makefile.config
flap-uzenat-elouraoui-15.2/Makefile
=> Je compile.
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
ocamlfind ocamldep -package unix -package str -modules src/flap.ml > src/flap.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/commandLineOptions.ml > src/commandLineOptions.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/options.ml > src/options.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.mli > src/utilities/error.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.mli > src/utilities/position.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/position.cmi src/utilities/position.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/error.cmi src/utilities/error.mli
ocamlfind ocamldep -package unix -package str -modules src/version.ml > src/version.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/options.cmo src/options.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/version.cmo src/version.ml
ocamlfind ocamldep -package unix -package str -modules src/common/compilers.ml > src/common/compilers.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/extStd.ml > src/utilities/extStd.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/common/languages.ml > src/common/languages.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extStd.cmo src/utilities/extStd.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmo src/common/languages.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInitialization.ml > src/hopix/hopixInitialization.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmo src/common/compilers.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopix.ml > src/hopix/hopix.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixAST.ml > src/hopix/hopixAST.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInterpreter.ml > src/hopix/hopixInterpreter.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixAST.cmo src/hopix/hopixAST.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/memory.mli > src/hopix/memory.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/memory.cmi src/hopix/memory.mli
/usr/bin/ocamllex -q src/hopix/hopixLexer.mll
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixLexer.ml > src/hopix/hopixLexer.ml.depends
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/hopix/hopixParser.mly > src/hopix/hopixParser.mly.depends
menhir --ocamlc 'ocamlfind ocamlc -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
File "src/hopix/hopixParser.mly", line 44, characters 0-5:
Warning: the precedence level assigned to SHARP is never useful.
Warning: one state has shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: one shift/reduce conflict was arbitrarily resolved.
Warning: 33 reduce/reduce conflicts were arbitrarily resolved.
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.mli > src/hopix/hopixParser.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixParser.cmi src/hopix/hopixParser.mli
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixPrettyPrinter.ml > src/hopix/hopixPrettyPrinter.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/extPPrint.ml > src/utilities/extPPrint.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrint.ml > src/lib/pprint/PPrint.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.mli > src/lib/pprint/PPrintCombinators.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.mli > src/lib/pprint/PPrintEngine.mli.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintRenderer.ml > src/lib/pprint/PPrintRenderer.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintRenderer.cmo src/lib/pprint/PPrintRenderer.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintEngine.cmi src/lib/pprint/PPrintEngine.mli
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.mli > src/lib/pprint/PPrintOCaml.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintCombinators.cmi src/lib/pprint/PPrintCombinators.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintOCaml.cmi src/lib/pprint/PPrintOCaml.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrint.cmo src/lib/pprint/PPrint.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extPPrint.cmo src/utilities/extPPrint.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypechecker.ml > src/hopix/hopixTypechecker.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypes.ml > src/hopix/hopixTypes.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypes.cmo src/hopix/hopixTypes.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.mli > src/utilities/syntacticAnalysis.mli.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 607, characters 18-264:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Op _|T _|Gener _)
File "src/hopix/hopixInterpreter.ml", line 489, characters 10-21:
Warning 26: unused variable list_to_str.
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixLexer.cmo src/hopix/hopixLexer.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmo src/hopix/hopixPrettyPrinter.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypechecker.cmo src/hopix/hopixTypechecker.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmi src/utilities/syntacticAnalysis.mli
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopix.cmo src/hopix/hopix.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/userInput.ml > src/utilities/userInput.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/stdUserInput.ml > src/utilities/stdUserInput.ml.depends
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/stdUserInput.cmo src/utilities/stdUserInput.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/commandLineOptions.cmo src/commandLineOptions.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInitialization.cmo src/hopix/hopixInitialization.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/userInput.cmo src/utilities/userInput.ml
ocamlfind ocamlc -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/flap.cmo src/flap.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.ml > src/utilities/error.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.ml > src/utilities/position.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/position.cmx src/utilities/position.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/error.cmx src/utilities/error.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/options.cmx src/options.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/version.cmx src/version.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extStd.cmx src/utilities/extStd.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmx src/common/languages.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmx src/common/compilers.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixAST.cmx src/hopix/hopixAST.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/memory.ml > src/hopix/memory.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/memory.cmx src/hopix/memory.ml
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.ml > src/hopix/hopixParser.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixParser.cmx src/hopix/hopixParser.ml
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.ml > src/lib/pprint/PPrintCombinators.ml.depends
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.ml > src/lib/pprint/PPrintEngine.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintRenderer.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintEngine.ml
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.ml > src/lib/pprint/PPrintOCaml.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintCombinators.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrintOCaml.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/lib/pprint -I src -I src/common -I src/hopix -I src/utilities -o src/lib/pprint/PPrint.cmx src/lib/pprint/PPrint.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/extPPrint.cmx src/utilities/extPPrint.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypes.cmx src/hopix/hopixTypes.ml
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.ml > src/utilities/syntacticAnalysis.ml.depends
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 607, characters 18-264:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Op _|T _|Gener _)
File "src/hopix/hopixInterpreter.ml", line 489, characters 10-21:
Warning 26: unused variable list_to_str.
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixLexer.cmx src/hopix/hopixLexer.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixPrettyPrinter.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixTypechecker.cmx src/hopix/hopixTypechecker.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmx src/utilities/syntacticAnalysis.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopix.cmx src/hopix/hopix.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/stdUserInput.cmx src/utilities/stdUserInput.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/commandLineOptions.cmx src/commandLineOptions.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/hopix -I src -I src/common -I src/utilities -I src/lib/pprint -o src/hopix/hopixInitialization.cmx src/hopix/hopixInitialization.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src/utilities -I src -I src/common -I src/hopix -I src/lib/pprint -o src/utilities/userInput.cmx src/utilities/userInput.ml
ocamlfind ocamlopt -c -annot -bin-annot -package unix -package str -I src -I src/common -I src/hopix -I src/utilities -I src/lib/pprint -o src/flap.cmx src/flap.ml
ocamlfind ocamlopt -linkpkg -package unix -package str src/utilities/position.cmx src/utilities/error.cmx src/options.cmx src/version.cmx src/commandLineOptions.cmx src/common/languages.cmx src/utilities/extStd.cmx src/common/compilers.cmx src/hopix/hopixAST.cmx src/hopix/memory.cmx src/hopix/hopixInterpreter.cmx src/hopix/hopixParser.cmx src/hopix/hopixLexer.cmx src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrint.cmx src/utilities/extPPrint.cmx src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixTypes.cmx src/hopix/hopixTypechecker.cmx src/utilities/syntacticAnalysis.cmx src/hopix/hopix.cmx src/hopix/hopixInitialization.cmx src/utilities/stdUserInput.cmx src/utilities/userInput.cmx src/flap.cmx -o src/flap.native
ln -s flap.native flap
=> Je lance les tests.
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make -C tests check
make[1]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests'
make -C ..
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2'
Source configuration ...
 * Ledit is not present: use default UserInput.
rm -f flap.native
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2'
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/bad'
========================================================
In parser/bad
GOOD: 0 / 0
[XFAIL]  casematters.hopix

INPUT: 
VAL x := 1.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char10.hopix

INPUT: 
val x := '\0b'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char1.hopix

INPUT: 
val x := ' a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char2.hopix

INPUT: 
val x := '\a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char3.hopix

INPUT: 
val x := '\256'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char4.hopix

INPUT: 
val x := '\666'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char5.hopix

INPUT: 
val x := '\0000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char6.hopix

INPUT: 
val x := '\0x0G'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char7.hopix

INPUT: 
val x := '\0x000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char8.hopix

INPUT: 
val x := '\0x1'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  char9.hopix

INPUT: 
val x := '\0b110011001'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  comment1.hopix

INPUT: 
{* This is an non-terminated comment ...

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  comment2.hopix

INPUT: 
{* This {* is {* a *} badly {* nested *} comment *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptydo.hopix

INPUT: 
val x := do done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptymatch.hopix

INPUT: 
val x := 1 ? { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptyrec.hopix

INPUT: 
val x := { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  emptytypes.hopix

INPUT: 
type empty := { }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  eq_nonassoc.hopix

INPUT: 
val x := (1 = 2 = true).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  extern.hopix

INPUT: 
val x :=
  extern foo : int;
  1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  labinfix.hopix

INPUT: 
val x := { `aa := 1 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  lt_nonassoc.hopix

INPUT: 
val x := (1 < x < 2).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  missingty.hopix

INPUT: 
val x := (1 : ).
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  neg.hopix

INPUT: 
val x := -1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  num1.hopix

INPUT: 
val x := 2147483648. {* 2^31 *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  num2.hopix

INPUT: 
val x := 0xdeadbeef0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  pairs.hopix

INPUT: 
val x := (1,2).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  patt1.hopix

INPUT: 
val f A (x,y) := x + y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  patt2.hopix

INPUT: 
val f A|B := 1.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  seq.hopix

INPUT: 
val x := 1 ; 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  string1.hopix

INPUT: 
val x := "abc\".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  string2.hopix

INPUT: 
val x := "abc"de".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr1.hopix

INPUT: 
type t := { a | b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr2.hopix

INPUT: 
type t := { `aa | `bb }

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  tconstr3.hopix

INPUT: 
val x := aa (1,2,3).

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unbalanced.hopix

INPUT: 
val x := ((1).
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unclosedtoplevel.hopix

INPUT: 
val x := 1
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
[XFAIL]  unfinishedlocaldef.hopix

INPUT: 
val x :=
  val x := 2;
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
--------------------------------------------------------
BAD:  37 / 37
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/bad'
make[2]: Entering directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/good'
========================================================
In parser/good
[ KO ]   -->  comment1.hopix

INPUT:
{* This is a comment *}

val a :=
{*
   Another one.
*}
1.

val b := 1 {* Still a comment *} + 1.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val a := 1.
val b := `+ 1 1.
--------------------------------------------------------
[ KO ]   -->  comment2.hopix

INPUT:

** This is also a comment.

val x := 1 + ** Another comment
1.

val x := 1 +** Still a comment
2.

val x := 3.** Again...

** A final comment **

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ 1 1.
val x := `+ 1 2.
val x := 3.
--------------------------------------------------------
[ KO ]   -->  comment4.hopix

INPUT:
{* This {* is {* a *} {* correctly *} nested *} comment *}

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 

--------------------------------------------------------
[ KO ]   -->  do1.hopix

INPUT:

{*
  NOTA: the generated names for the local abbreviations will probably
  not match :-(
*}

val seq3 i1 i2 i3 := do i1; i2; i3 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
--------------------------------------------------------
[ KO ]   -->  do2.hopix

INPUT:

val seq3 i1 i2 i3 := do i1; i2; i3; done.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
--------------------------------------------------------
[ KO ]   -->  do3.hopix

INPUT:
{* test of => followed by ; *}

val f y :=
 do y ? _ => 1;
    2
 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \y => val nothing := y ? { | _ => 1 }; 2.
--------------------------------------------------------
[ KO ]   -->  do4.hopix

INPUT:
val f y :=
 do 1; y ? _ => 2 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \y => val nothing := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  do.hopix

INPUT:

{*
  NOTA: the generated names for the local abbreviations will probably
  not match :-(
*}

val seq3 i1 i2 i3 := do i1; i2; i3 done.

val seq3 i1 i2 i3 := do i1; i2; i3; done.

{* test of => followed by ; *}

val f y :=
 do y ? _ => 1;
    2
 done.

val f y :=
 do 1; y ? _ => 2 done.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
val seq3 :=
  \i1 => \i2 => \i3 => val nothing := i1; val nothing := i2; i3.
val f := \y => val nothing := y ? { | _ => 1 }; 2.
val f := \y => val nothing := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  extern1.hopix

INPUT:

extern something : int.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern something : int.
--------------------------------------------------------
[ KO ]   -->  extern2.hopix

INPUT:
extern some_function : int -> (int -> int) -> int.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern some_function : int -> (int -> int) -> int.
--------------------------------------------------------
[ KO ]   -->  extern.hopix

INPUT:

extern something : int.
extern some_function : int -> (int -> int) -> int.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
extern something : int.
extern some_function : int -> (int -> int) -> int.
--------------------------------------------------------
[ KO ]   -->  functions2.hopix

INPUT:
val f (x : int) (y : int) : int := x + y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \(x : int) => \(y : int) => (`+ x y : int).
--------------------------------------------------------
[ KO ]   -->  functions3.hopix

INPUT:
val f : int -> int := \x => x + 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := (\x => `+ x 1 : int -> int).
--------------------------------------------------------
[ KO ]   -->  functions4.hopix

INPUT:
val g := \x y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  functions5.hopix

INPUT:
val g := \x => \y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  functions.hopix

INPUT:
val f x y := x + y.
val f (x : int) (y : int) : int := x + y.
val f : int -> int := \x => x + 1.

val g := \x y => x+y.
val g := \x => \y => x+y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => `+ x y.
val f := \(x : int) => \(y : int) => (`+ x y : int).
val f := (\x => `+ x 1 : int -> int).
val g := \x => \y => `+ x y.
val g := \x => \y => `+ x y.
--------------------------------------------------------
[ KO ]   -->  infix1.hopix

INPUT:

val `++ x y := x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `++ := \x => \y => x.
--------------------------------------------------------
[ KO ]   -->  infix2.hopix

INPUT:
val z := 0 `++` 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val z := `++ 0 0.
--------------------------------------------------------
[ KO ]   -->  infix3.hopix

INPUT:
val k := `++ 0 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val k := `++ 0 0.
--------------------------------------------------------
[ KO ]   -->  infix4.hopix

INPUT:
val `eats := \x y => x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `eats := \x => \y => x.
--------------------------------------------------------
[ KO ]   -->  infix5.hopix

INPUT:
val wow cat mouse := cat `eats` mouse.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val wow := \cat => \mouse => `eats cat mouse.
--------------------------------------------------------
[ KO ]   -->  infix6.hopix

INPUT:

val apply := \ `op x y => x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  infix7.hopix

INPUT:
val apply `op x y := x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  infix.hopix

INPUT:

val `++ x y := x.
val z := 0 `++` 0.
val k := `++ 0 0.
val `eats := \x y => x.
val wow cat mouse := cat `eats` mouse.

val apply := \ `op x y => x `op` y.
val apply `op x y := x `op` y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val `++ := \x => \y => x.
val z := `++ 0 0.
val k := `++ 0 0.
val `eats := \x => \y => x.
val wow := \cat => \mouse => `eats cat mouse.
val apply := \`op => \x => \y => `op x y.
val apply := \`op => \x => \y => `op x y.
--------------------------------------------------------
[ KO ]   -->  lexchar10.hopix

INPUT:
val x := '\r'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\r'.
--------------------------------------------------------
[ KO ]   -->  lexchar11.hopix

INPUT:
val x := '\000'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\000'.
--------------------------------------------------------
[ KO ]   -->  lexchar12.hopix

INPUT:
val x := '\001'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\001'.
--------------------------------------------------------
[ KO ]   -->  lexchar13.hopix

INPUT:
val x := '\255'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\255'.
--------------------------------------------------------
[ KO ]   -->  lexchar14.hopix

INPUT:
val x := '\0xFF'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\255'.
--------------------------------------------------------
[ KO ]   -->  lexchar15.hopix

INPUT:
val x := '\0XaB'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\171'.
--------------------------------------------------------
[ KO ]   -->  lexchar16.hopix

INPUT:
val x := '\0x12'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\018'.
--------------------------------------------------------
[ KO ]   -->  lexchar17.hopix

INPUT:
val x := '\0b11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexchar18.hopix

INPUT:
val x := '\0B11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexchar1.hopix

INPUT:
val x := 'a'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'a'.
--------------------------------------------------------
[ KO ]   -->  lexchar2.hopix

INPUT:
val x := 'A'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'A'.
--------------------------------------------------------
[ KO ]   -->  lexchar3.hopix

INPUT:
val x := '*'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '*'.
--------------------------------------------------------
[ KO ]   -->  lexchar4.hopix

INPUT:
val x := '@'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '@'.
--------------------------------------------------------
[ KO ]   -->  lexchar5.hopix

INPUT:
val x := '\\'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\\'.
--------------------------------------------------------
[ KO ]   -->  lexchar6.hopix

INPUT:
val x := '\''.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\''.
--------------------------------------------------------
[ KO ]   -->  lexchar7.hopix

INPUT:
val x := '\n'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\n'.
--------------------------------------------------------
[ KO ]   -->  lexchar8.hopix

INPUT:
val x := '\t'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\t'.
--------------------------------------------------------
[ KO ]   -->  lexchar9.hopix

INPUT:
val x := '\b'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := '\b'.
--------------------------------------------------------
[ KO ]   -->  lexchar.hopix

INPUT:
val x := 'a'.
val x := 'A'.
val x := '*'.
val x := '@'.
val x := '\\'.
val x := '\''.
val x := '\n'.
val x := '\t'.
val x := '\b'.
val x := '\r'.
val x := '\000'.
val x := '\001'.
val x := '\255'.
val x := '\0xFF'.
val x := '\0XaB'.
val x := '\0x12'.
val x := '\0b11001100'.
val x := '\0B11001100'.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 'a'.
val x := 'A'.
val x := '*'.
val x := '@'.
val x := '\\'.
val x := '\''.
val x := '\n'.
val x := '\t'.
val x := '\b'.
val x := '\r'.
val x := '\000'.
val x := '\001'.
val x := '\255'.
val x := '\255'.
val x := '\171'.
val x := '\018'.
val x := '\204'.
val x := '\204'.
--------------------------------------------------------
[ KO ]   -->  lexnum1.hopix

INPUT:
val x := 0.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0.
--------------------------------------------------------
[ KO ]   -->  lexnum2.hopix

INPUT:
val x := 1234567890.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 1234567890.
--------------------------------------------------------
[ KO ]   -->  lexnum3.hopix

INPUT:
val x := 0xdeadbee.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 233495534.
--------------------------------------------------------
[ KO ]   -->  lexnum4.hopix

INPUT:
val x := 0XdeadBEE.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 233495534.
--------------------------------------------------------
[ KO ]   -->  lexnum5.hopix

INPUT:
val x := 0x12345678.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 305419896.
--------------------------------------------------------
[ KO ]   -->  lexnum6.hopix

INPUT:
val x := 0xdeadbeef.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := -559038737.
--------------------------------------------------------
[ KO ]   -->  lexnum7.hopix

INPUT:
val x := 0b101010.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 42.
--------------------------------------------------------
[ KO ]   -->  lexnum.hopix

INPUT:
val x := 0.
val x := 1234567890.
val x := 0xdeadbee.
val x := 0XdeadBEE.
val x := 0x12345678.
val x := 0xdeadbeef.
val x := 0b101010.
val x := 0B101010.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0.
val x := 1234567890.
val x := 233495534.
val x := 233495534.
val x := 305419896.
val x := -559038737.
val x := 42.
val x := 42.
--------------------------------------------------------
[ KO ]   -->  lexstring1.hopix

INPUT:
val x := "".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "".
--------------------------------------------------------
[ KO ]   -->  lexstring2.hopix

INPUT:
val x := "abc".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "abc".
--------------------------------------------------------
[ KO ]   -->  lexstring3.hopix

INPUT:
val x := "**".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "**".
--------------------------------------------------------
[ KO ]   -->  lexstring4.hopix

INPUT:
val x := "{*".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "{*".
--------------------------------------------------------
[ KO ]   -->  lexstring5.hopix

INPUT:
val x := "*}".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "*}".
--------------------------------------------------------
[ KO ]   -->  lexstring6.hopix

INPUT:
val x := "a\'a".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "a'a".
--------------------------------------------------------
[ KO ]   -->  lexstring.hopix

INPUT:
val x := "".
val x := "abc".
val x := "**".
val x := "{*".
val x := "*}".
val x := "a\'a".

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := "".
val x := "abc".
val x := "**".
val x := "{*".
val x := "*}".
val x := "a'a".
--------------------------------------------------------
[ KO ]   -->  lexweird1.hopix

INPUT:
{* These are actually recognized as 0 applied to a variable.
   This is badly typed, but that's another story... *}

val x := 0x.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0 x.
--------------------------------------------------------
[ KO ]   -->  lexweird2.hopix

INPUT:
val b := 0b.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val b := 0 b.
--------------------------------------------------------
[ KO ]   -->  lexweird.hopix

INPUT:
{* These are actually recognized as 0 applied to a variable.
   This is badly typed, but that's another story... *}

val x := 0x.
val b := 0b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := 0 x.
val b := 0 b.
--------------------------------------------------------
[ KO ]   -->  list.hopix

INPUT:

type list := { Cons : int * list | Nil }.

rec map f l : list :=
  l ?
  | Nil => Nil
  | Cons (x, xs) => Cons (f x, map f xs)
.

rec append l1 l2 : list :=
  l1 ? Nil => l2 | Cons (x, xs) => Cons (x, append xs l2)
.

rec sum l1 l2 : list :=
  l1 ?
  | Nil => l2 ? { _ => l2 }
  | Cons (x, xs) => l2 ? Cons (y, ys) => Cons (x + y, sum xs ys) | _ => l1
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type list := { Cons : int * list | Nil }.
rec
 map :=
  \f =>
    \l =>
      (l ? { | Nil => Nil | Cons (x, xs) => Cons (f x, map f xs) }
      : list).
rec
 append :=
  \l1 =>
    \l2 =>
      (l1 ? { | Nil => l2 | Cons (x, xs) => Cons (x, append xs l2) }
      : list).
rec
 sum :=
  \l1 =>
    \l2 =>
      (l1 ?
      {
      | Nil => l2 ? { | _ => l2 }
      | Cons (x, xs) =>
        l2 ? { | Cons (y, ys) => Cons (`+ x y, sum xs ys) | _ => l1 }
      }
      : list).
--------------------------------------------------------
[ KO ]   -->  localdef1.hopix

INPUT:

val x :=
  val y := 1;
  val z := 2;
  y+z.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; val z := 2; `+ y z.
--------------------------------------------------------
[ KO ]   -->  localdef2.hopix

INPUT:
val x := 1 +
  val y := 1;
  val z := 2;
  y + z.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ 1 (val y := 1; val z := 2; `+ y z).
--------------------------------------------------------
[ KO ]   -->  localdef3.hopix

INPUT:

val x :=
  val y :=
    val z := 1;
    2*z;
  val t :=
    val u := 2;
    2*u;
  y*t.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x :=
  val y := val z := 1; `* 2 z; val t := val u := 2; `* 2 u; `* y t.
--------------------------------------------------------
[ KO ]   -->  localdef4.hopix

INPUT:

val even :=
  rec even x := if x = 0 then true else odd (x-1) fi
  and odd x := if x = 0 then false else even (x-1) fi;
  even.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val even :=
  rec
     even := \x => if `= x 0 then true else odd (`- x 1) fi
    and
     odd := \x => if `= x 0 then false else even (`- x 1) fi;
  even.
--------------------------------------------------------
[ KO ]   -->  localdef.hopix

INPUT:

val x :=
  val y := 1;
  val z := 2;
  y+z.

val x := 1 +
  val y := 1;
  val z := 2;
  y + z.

val x :=
  val y :=
    val z := 1;
    2*z;
  val t :=
    val u := 2;
    2*u;
  y*t.

val even :=
  rec even x := if x = 0 then true else odd (x-1) fi
  and odd x := if x = 0 then false else even (x-1) fi;
  even.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; val z := 2; `+ y z.
val x := `+ 1 (val y := 1; val z := 2; `+ y z).
val x :=
  val y := val z := 1; `* 2 z; val t := val u := 2; `* 2 u; `* y t.
val even :=
  rec
     even := \x => if `= x 0 then true else odd (`- x 1) fi
    and
     odd := \x => if `= x 0 then false else even (`- x 1) fi;
  even.
--------------------------------------------------------
[ KO ]   -->  match11.hopix

INPUT:

type enum := { | A | B | C | D }.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
--------------------------------------------------------
[ KO ]   -->  match12.hopix

INPUT:
val f x := x ? A => 1 | B => 2 | C => 3 | D => 4.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
--------------------------------------------------------
[ KO ]   -->  match13.hopix

INPUT:
val f x := x ? A => 1 | B | C | D => 3.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match14.hopix

INPUT:
val f x := x ? | A => 1 | B | C | D => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match15.hopix

INPUT:
val f x y := x ? A => y ? B => C.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match1.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? A => 1 | B => 2 | C => 3 | D => 4.
val f x := x ? A => 1 | B | C | D => 3.
val f x := x ? | A => 1 | B | C | D => 3.
val f x y := x ? A => y ? B => C.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match21.hopix

INPUT:

type enum := { | A | B | C | D }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
--------------------------------------------------------
[ KO ]   -->  match22.hopix

INPUT:

val f x := x ? { A => 1 | B => 2 | C => 3 | D => 4 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
--------------------------------------------------------
[ KO ]   -->  match23.hopix

INPUT:
val f x := x ? { A => 1 | B | C | D => 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match24.hopix

INPUT:
val f x := x ? { | A => 1 | B | C | D => 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
--------------------------------------------------------
[ KO ]   -->  match25.hopix

INPUT:
val f x y := x ? { A => y ? { B => C } }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match2.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? { A => 1 | B => 2 | C => 3 | D => 4 }.
val f x := x ? { A => 1 | B | C | D => 3 }.
val f x := x ? { | A => 1 | B | C | D => 3 }.
val f x y := x ? { A => y ? { B => C } }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | A => 1 | B => 2 | C => 3 | D => 4 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => x ? { | A => 1 | (B | C | D) => 3 }.
val f := \x => \y => x ? { | A => y ? { | B => C } }.
--------------------------------------------------------
[ KO ]   -->  match31.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? ((A|B)|(C|D)) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match32.hopix

INPUT:
val f x := x ? (((A|B)|C)|D) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match33.hopix

INPUT:
val f x := x ? (A|(B|(C|D))) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | B | C | D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match34.hopix

INPUT:
val f x := x ? ((A&B)&(C&D)) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match35.hopix

INPUT:
val f x := x ? (((A&B)&C)&D) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match36.hopix

INPUT:
val f x := x ? (A&(B&(C&D))) => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A & B & C & D) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match37.hopix

INPUT:
val f x := x ? (A|B) & y & (B|C) & _ => y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | ((A | B) & y & (B | C) & _) => y }.
--------------------------------------------------------
[ KO ]   -->  match38.hopix

INPUT:
val f x := x ? A | B & y | _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | (A | (B & y) | _) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match3.hopix

INPUT:

type enum := { | A | B | C | D }.

val f x := x ? ((A|B)|(C|D)) => 1.
val f x := x ? (((A|B)|C)|D) => 1.
val f x := x ? (A|(B|(C|D))) => 1.

val f x := x ? ((A&B)&(C&D)) => 1.
val f x := x ? (((A&B)&C)&D) => 1.
val f x := x ? (A&(B&(C&D))) => 1.

val f x := x ? (A|B) & y & (B|C) & _ => y.
val f x := x ? A | B & y | _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type enum := { A | B | C | D }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A | B | C | D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | (A & B & C & D) => 1 }.
val f := \x => x ? { | ((A | B) & y & (B | C) & _) => y }.
val f := \x => x ? { | (A | (B & y) | _) => 1 }.
--------------------------------------------------------
[ KO ]   -->  match41.hopix

INPUT:
type record := { aaa : int; bbb : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type record := { aaa : int ; bbb : int }.
--------------------------------------------------------
[ KO ]   -->  match42.hopix

INPUT:
val f x := x ? { aaa = a; bbb = b } => a+b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match43.hopix

INPUT:
val f x := x ? { { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match44.hopix

INPUT:
val f x := x ? | { aaa = a; bbb = b } => a+b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match45.hopix

INPUT:
val f x := x ? { | { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  match4.hopix

INPUT:

type record := { aaa : int; bbb : int }.

val f x := x ? { aaa = a; bbb = b } => a+b.
val f x := x ? { { aaa = a; bbb = b } => a+b }.
val f x := x ? | { aaa = a; bbb = b } => a+b.
val f x := x ? { | { aaa = a; bbb = b } => a+b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type record := { aaa : int ; bbb : int }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
val f := \x => x ? { | { aaa = a; bbb = b } => `+ a b }.
--------------------------------------------------------
[ KO ]   -->  mutrecfun.hopix

INPUT:

rec odd (n : int) : int :=
  if n = 0 then false else
  if n = 1 then true else
    even (n - 1)
  fi fi
and even (n : int) : int :=
  if n = 0 then true else
  if n = 1 then false else
    odd (n - 1)
  fi fi
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
rec
 odd :=
  \(n : int) =>
    (if `= n 0 then false
    else if `= n 1 then true else even (`- n 1) fi fi
    : int)
and even :=
  \(n : int) =>
    (if `= n 0 then true
    else if `= n 1 then false else odd (`- n 1) fi fi
    : int).
--------------------------------------------------------
[ KO ]   -->  pri_app1.hopix

INPUT:

{* priority of application *}

val x := f a + b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (f a) b.
--------------------------------------------------------
[ KO ]   -->  pri_app2.hopix

INPUT:
val x := f a # b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := f (a#b).
--------------------------------------------------------
[ KO ]   -->  pri_app3.hopix

INPUT:
val x := f g a.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := f g a.
--------------------------------------------------------
[ KO ]   -->  pri_app.hopix

INPUT:

{* priority of application *}

val x := f a + b.
val x := f a # b.
val x := f g a.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (f a) b.
val x := f (a#b).
val x := f g a.
--------------------------------------------------------
[ KO ]   -->  pri_arith1.hopix

INPUT:
val x := 1+2+3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith2.hopix

INPUT:
val x := 1+2-3-4+5.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`- (`- (`+ 1 2) 3) 4) 5.
--------------------------------------------------------
[ KO ]   -->  pri_arith3.hopix

INPUT:
val x := 1*2*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`* 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith4.hopix

INPUT:
val x := 1/2/3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `/ (`/ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith5.hopix

INPUT:
val x := 1*2/3/4*5.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`/ (`/ (`* 1 2) 3) 4) 5.
--------------------------------------------------------
[ KO ]   -->  pri_arith6.hopix

INPUT:
val x := 1+2*3-4.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `- (`+ 1 (`* 2 3)) 4.
--------------------------------------------------------
[ KO ]   -->  pri_arith7.hopix

INPUT:
val x := 1+2*3-4/5+6.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`- (`+ 1 (`* 2 3)) (`/ 4 5)) 6.
--------------------------------------------------------
[ KO ]   -->  pri_arith8.hopix

INPUT:
val x := (1+2)*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_arith.hopix

INPUT:

{* Arithmetical priorities *}

val x := 1+2+3.
val x := 1+2-3-4+5.
val x := 1*2*3.
val x := 1/2/3.
val x := 1*2/3/4*5.
val x := 1+2*3-4.
val x := 1+2*3-4/5+6.
val x := (1+2)*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `+ (`+ 1 2) 3.
val x := `+ (`- (`- (`+ 1 2) 3) 4) 5.
val x := `* (`* 1 2) 3.
val x := `/ (`/ 1 2) 3.
val x := `* (`/ (`/ (`* 1 2) 3) 4) 5.
val x := `- (`+ 1 (`* 2 3)) 4.
val x := `+ (`- (`+ 1 (`* 2 3)) (`/ 4 5)) 6.
val x := `* (`+ 1 2) 3.
--------------------------------------------------------
[ KO ]   -->  pri_comp1.hopix

INPUT:

{* Priorities of comparisons and boolean operators *}

val x := 2 = 1 + 1.


OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 2 (`+ 1 1).
--------------------------------------------------------
[ KO ]   -->  pri_comp2.hopix

INPUT:
val x := true || true || true && true && true.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `|| (`|| true true) (`&& (`&& true true) true).
--------------------------------------------------------
[ KO ]   -->  pri_comp3.hopix

INPUT:
val x := 1 + 1 < 2 + 2 && 4 = 7.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `&& (`< (`+ 1 1) (`+ 2 2)) (`= 4 7).
--------------------------------------------------------
[ KO ]   -->  pri_comp.hopix

INPUT:

{* Priorities of comparisons and boolean operators *}

val x := 2 = 1 + 1.

val x := true || true || true && true && true.

val x := 1 + 1 < 2 + 2 && 4 = 7.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 2 (`+ 1 1).
val x := `|| (`|| true true) (`&& (`&& true true) true).
val x := `&& (`< (`+ 1 1) (`+ 2 2)) (`= 4 7).
--------------------------------------------------------
[ KO ]   -->  pri_infix.hopix

INPUT:

{* priority of infix operators *}

val x := 1 = 1 `op` 2 `op` 3 + 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `= 1 (`op (`op 1 2) (`+ 3 3)).
--------------------------------------------------------
[ KO ]   -->  pri_larrow1.hopix

INPUT:
{* priority of <- *}

val x := t#a <- 1 + 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `+ 1 2.
--------------------------------------------------------
[ KO ]   -->  pri_larrow2.hopix

INPUT:
val x := t#a <- true || false.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `|| true false.
--------------------------------------------------------
[ KO ]   -->  pri_larrow3.hopix

INPUT:
val x := t#a <- t ? _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- (t ? { | _ => 1 }).
--------------------------------------------------------
[ KO ]   -->  pri_larrow.hopix

INPUT:
{* priority of <- *}

val x := t#a <- 1 + 2.
val x := t#a <- true || false.
val x := t#a <- t ? _ => 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a <- `+ 1 2.
val x := t#a <- `|| true false.
val x := t#a <- (t ? { | _ => 1 }).
--------------------------------------------------------
[ KO ]   -->  pri_qmark1.hopix

INPUT:
{* priority of ? *}
val x := x * x ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* x (x ? { | _ => 3 }).
--------------------------------------------------------
[ KO ]   -->  pri_qmark2.hopix

INPUT:
val x := x # a ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := x#a ? { | _ => 3 }.
--------------------------------------------------------
[ KO ]   -->  pri_qmark.hopix

INPUT:
{* priority of ? *}

val x := x * x ? _ => 3.
val x := x # a ? _ => 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* x (x ? { | _ => 3 }).
val x := x#a ? { | _ => 3 }.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow1.hopix

INPUT:

{* priority of => *}

val x := \x => x + x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `+ x x.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow2.hopix

INPUT:
val x := \x => x && x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `&& x x.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow3.hopix

INPUT:

val x := \x => x#a <- 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => x#a <- 1.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow4.hopix

INPUT:

val x :=
 val f := \x => x;
 f.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val f := \x => x; f.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow5.hopix

INPUT:

val x :=
  val f y := y ? _ => 1;
  f 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val f := \y => y ? { | _ => 1 }; f 1.
--------------------------------------------------------
[ KO ]   -->  pri_rarrow.hopix

INPUT:

{* priority of => *}

val x := \x => x + x.
val x := \x => x && x.

val x := \x => x#a <- 1.

val x :=
 val f := \x => x;
 f.

val x :=
  val f y := y ? _ => 1;
  f 1.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := \x => `+ x x.
val x := \x => `&& x x.
val x := \x => x#a <- 1.
val x := val f := \x => x; f.
val x := val f := \y => y ? { | _ => 1 }; f 1.
--------------------------------------------------------
[ KO ]   -->  pri_scolon1.hopix

INPUT:
{* priority of ; *}

val x :=
  val y := 1 + 1 ;
  y + y.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := `+ 1 1; `+ y y.
--------------------------------------------------------
[ KO ]   -->  pri_scolon2.hopix

INPUT:
val x :=
  val y := true ;
  y || y.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := true; `|| y y.
--------------------------------------------------------
[ KO ]   -->  pri_scolon3.hopix

INPUT:
val x :=
  val y := 1 ; y ? _ => 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  pri_scolon.hopix

INPUT:
{* priority of ; *}

val x :=
  val y := 1 + 1 ;
  y + y.

val x :=
  val y := true ;
  y || y.

val x :=
  val y := 1 ; y ? _ => 2.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := val y := `+ 1 1; `+ y y.
val x := val y := true; `|| y y.
val x := val y := 1; y ? { | _ => 2 }.
--------------------------------------------------------
[ KO ]   -->  pri_sharp1.hopix

INPUT:

{* priority of # *}

val x := t#a#b.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a#b.
--------------------------------------------------------
[ KO ]   -->  pri_sharp2.hopix

INPUT:
val x := t#a*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := `* (t#a) 3.
--------------------------------------------------------
[ KO ]   -->  pri_sharp.hopix

INPUT:

{* priority of # *}

val x := t#a#b.
val x := t#a*3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val x := t#a#b.
val x := `* (t#a) 3.
--------------------------------------------------------
[ KO ]   -->  recfun.hopix

INPUT:
rec fact (n : int) : int :=
  if n = 0 then 1 else n * fact (n - 1) fi
.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
rec
 fact :=
  \(n : int) =>
    (if `= n 0 then 1 else `* n (fact (`- n 1)) fi : int).
--------------------------------------------------------
[ KO ]   -->  record1.hopix

INPUT:
type point := { x : int; y : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
--------------------------------------------------------
[ KO ]   -->  record2.hopix

INPUT:

val p := { x := 2; y := 3 }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val p := { x := 2; y := 3 }.
--------------------------------------------------------
[ KO ]   -->  record3.hopix

INPUT:
val y := p#x.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val y := p#x.
--------------------------------------------------------
[ KO ]   -->  record4.hopix

INPUT:
val u := p#x <- 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
val u := p#x <- 3.
--------------------------------------------------------
[ KO ]   -->  record.hopix

INPUT:

type point := { x : int; y : int }.

val p := { x := 2; y := 3 }.
val y := p#x.
val u := p#x <- 3.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
val p := { x := 2; y := 3 }.
val y := p#x.
val u := p#x <- 3.
--------------------------------------------------------
[ KO ]   -->  types1.hopix

INPUT:
type some_abstract_type.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type some_abstract_type .
--------------------------------------------------------
[ KO ]   -->  types2.hopix

INPUT:
type point := { x : int; y : int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type point := { x : int ; y : int }.
--------------------------------------------------------
[ KO ]   -->  types3.hopix

INPUT:
type unit := { Unit }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type unit := { Unit }.
--------------------------------------------------------
[ KO ]   -->  types4.hopix

INPUT:
type list := { Cons : int * list | Nil }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type list := { Cons : int * list | Nil }.
--------------------------------------------------------
[ KO ]   -->  types5.hopix

INPUT:
type option ['a] := { None | Some : 'a }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type option[ 'a ] := { None | Some : 'a }.
--------------------------------------------------------
[ KO ]   -->  types6.hopix

INPUT:
type either ['a, 'b] := { Left : 'a | Right : 'b }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type either[ 'a, 'b ] := { Left : 'a | Right : 'b }.
--------------------------------------------------------
[ KO ]   -->  types7.hopix

INPUT:
type stream ['a] := { Next : unit -> 'a * stream['a] }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type stream[ 'a ] := { Next : unit -> 'a * stream [ 'a ] }.
--------------------------------------------------------
[ KO ]   -->  types8.hopix

INPUT:
type t1 := { T1 : (option [point] -> int) -> int -> int }.

OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type t1 := { T1 : (option [ point ] -> int) -> int -> int }.
--------------------------------------------------------
[ KO ]   -->  types9.hopix

INPUT:
type t2 := { T2 : either [int, option [int]] }.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type t2 := { T2 : either [ int, option [ int ] ] }.
--------------------------------------------------------
[ KO ]   -->  types.hopix

INPUT:
type some_abstract_type.
type point := { x : int; y : int }.
type unit := { Unit }.
type list := { Cons : int * list | Nil }.
type option ['a] := { None | Some : 'a }.
type either ['a, 'b] := { Left : 'a | Right : 'b }.
type stream ['a] := { Next : unit -> 'a * stream['a] }.
type t1 := { T1 : (option [point] -> int) -> int -> int }.
type t2 := { T2 : either [int, option [int]] }.
OUTPUT: 
Fatal error: exception Assert_failure("src/hopix/hopixInterpreter.ml", 659, 11)
EXPECTED: 
type some_abstract_type .
type point := { x : int ; y : int }.
type unit := { Unit }.
type list := { Cons : int * list | Nil }.
type option[ 'a ] := { None | Some : 'a }.
type either[ 'a, 'b ] := { Left : 'a | Right : 'b }.
type stream[ 'a ] := { Next : unit -> 'a * stream [ 'a ] }.
type t1 := { T1 : (option [ point ] -> int) -> int -> int }.
type t2 := { T2 : either [ int, option [ int ] ] }.
--------------------------------------------------------
GOOD: 0 / 149
BAD:  0 / 0
make[2]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests/hopix/parser/good'
--------------------------------------------------------
Global results:
BAD:   37 / 37
GOOD:  0 / 149
--------------------------------------------------------
make[1]: Leaving directory '/home/user1/answer/flap-uzenat-elouraoui-15.2/tests'
